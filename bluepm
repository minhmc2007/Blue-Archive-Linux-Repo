#!/usr/bin/env python3
#
# bluepm v1.0 - Professional Package Manager for Blue Archive Linux
#

import sys
import os
import re
import json
import time
import fcntl
import signal
import hashlib
import subprocess
import configparser
from pathlib import Path
import requests

# --- Configuration Defaults ---
DEFAULT_CONFIG = {
    'owner': "minhmc2007",
    'repo': "Blue-Archive-Linux-Repo",
    'branch': "main",
    'path': "x86_64",
    'cache_ttl': "3600"  # 1 hour
}

# --- Paths ---
CONFIG_PATH = "/etc/bluepm.conf"
CACHE_DIR = "/var/cache/bluepm"
LOCK_FILE = "/var/lock/bluepm.lock"
CACHE_FILE = os.path.join(CACHE_DIR, "packages.cache")

# --- Color Setup ---
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

# --- Error Handling ---
class BluePMError(Exception):
    pass

# --- Package Manager Core ---
class BluePackageManager:
    def __init__(self):
        self.config = self.load_config()
        self.api_url = f"https://api.github.com/repos/{self.config['owner']}/{self.config['repo']}/contents/{self.config['path']}"
        self.download_base = f"https://raw.githubusercontent.com/{self.config['owner']}/{self.config['repo']}/{self.config['branch']}/{self.config['path']}"
        self.cache_ttl = int(self.config['cache_ttl'])
        
        # Ensure cache directory exists
        os.makedirs(CACHE_DIR, exist_ok=True)
    
    def load_config(self):
        """Load configuration from file or use defaults"""
        config = DEFAULT_CONFIG.copy()
        
        if os.path.exists(CONFIG_PATH):
            parser = configparser.ConfigParser()
            parser.read(CONFIG_PATH)
            
            if 'Repository' in parser:
                for key in DEFAULT_CONFIG.keys():
                    if key in parser['Repository']:
                        config[key] = parser['Repository'][key]
        
        return config
    
    def acquire_lock(self):
        """Acquire exclusive lock for package operations"""
        self.lockfile = open(LOCK_FILE, 'w')
        try:
            fcntl.flock(self.lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except BlockingIOError:
            print(f"{Colors.FAIL}Error: Another bluepm operation is in progress{Colors.ENDC}")
            sys.exit(1)
    
    def release_lock(self):
        """Release the exclusive lock"""
        if hasattr(self, 'lockfile') and self.lockfile:
            fcntl.flock(self.lockfile, fcntl.LOCK_UN)
            self.lockfile.close()
            os.remove(LOCK_FILE)
    
    def signal_handler(self, signum, frame):
        """Handle interrupt signals"""
        print(f"\n{Colors.WARNING}Operation cancelled by user{Colors.ENDC}")
        self.release_lock()
        sys.exit(1)
    
    def check_dependencies(self):
        """Verify required system dependencies"""
        required = ['dpkg', 'apt']
        missing = []
        
        for cmd in required:
            if not any(os.access(os.path.join(path, cmd), os.X_OK) 
                   for path in os.environ["PATH"].split(os.pathsep)):
                missing.append(cmd)
        
        if missing:
            print(f"{Colors.FAIL}Missing dependencies:{Colors.ENDC} {', '.join(missing)}")
            sys.exit(1)
    
    def get_package_list(self, force_refresh=False):
        """Retrieve package list with caching"""
        # Check cache validity
        if not force_refresh and os.path.exists(CACHE_FILE):
            cache_age = time.time() - os.path.getmtime(CACHE_FILE)
            if cache_age < self.cache_ttl:
                with open(CACHE_FILE, 'r') as f:
                    return json.load(f)
        
        # Fetch fresh package list
        try:
            print(f"{Colors.OKBLUE}==> Fetching package list...{Colors.ENDC}")
            response = requests.get(self.api_url)
            response.raise_for_status()
            packages = [
                file['name'][:-4]  # Remove .deb extension
                for file in response.json()
                if file['type'] == 'file' and file['name'].endswith('.deb')
            ]
            
            # Update cache
            with open(CACHE_FILE, 'w') as f:
                json.dump(packages, f)
            
            return packages
        except requests.exceptions.RequestException as e:
            print(f"{Colors.FAIL}Error connecting to repository:{Colors.ENDC} {e}")
            sys.exit(1)
    
    def search_packages(self, query):
        """Search packages in repository"""
        packages = self.get_package_list()
        
        if not query:
            print(f"{Colors.OKGREEN}Available packages:{Colors.ENDC}")
            for pkg in sorted(packages):
                print(f"  {Colors.BOLD}{pkg}{Colors.ENDC}")
            return
        
        print(f"{Colors.OKBLUE}==> Searching for '{query}'...{Colors.ENDC}")
        results = [
            pkg for pkg in packages
            if query.lower() in pkg.lower()
        ]
        
        if results:
            print(f"{Colors.OKGREEN}Found packages:{Colors.ENDC}")
            for pkg in sorted(results):
                print(f"  {Colors.BOLD}{pkg}{Colors.ENDC}")
        else:
            print(f"{Colors.WARNING}No packages found matching '{query}'{Colors.ENDC}")
    
    def is_package_installed(self, package_name):
        """Check if package is installed"""
        result = subprocess.run(
            ['dpkg-query', '-W', '-f=${Status}', package_name],
            capture_output=True, text=True
        )
        return 'install ok installed' in result.stdout
    
    def download_package(self, package_name):
        """Download .deb package to temporary location"""
        deb_file = f"{package_name}.deb"
        download_url = f"{self.download_base}/{deb_file}"
        tmp_path = f"/tmp/{deb_file}"
        
        try:
            print(f"{Colors.OKBLUE}==> Downloading {package_name}...{Colors.ENDC}")
            with requests.get(download_url, stream=True) as r:
                r.raise_for_status()
                with open(tmp_path, 'wb') as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        f.write(chunk)
            return tmp_path
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                raise BluePMError(f"Package '{package_name}' not found in repository")
            raise BluePMError(f"Download failed: {e}")
    
    def install_package(self, package_name):
        """Install a package with dependency resolution"""
        # Check if already installed
        if self.is_package_installed(package_name):
            print(f"{Colors.WARNING}Package {package_name} is already installed{Colors.ENDC}")
            return
        
        # Download package
        try:
            deb_path = self.download_package(package_name)
        except BluePMError as e:
            print(f"{Colors.FAIL}{e}{Colors.ENDC}")
            sys.exit(1)
        
        # Install package
        try:
            print(f"{Colors.OKBLUE}==> Installing {package_name}...{Colors.ENDC}")
            subprocess.run(['sudo', 'dpkg', '-i', deb_path], check=True)
            print(f"{Colors.OKGREEN}Successfully installed {package_name}{Colors.ENDC}")
        except subprocess.CalledProcessError:
            print(f"{Colors.WARNING}==> Fixing dependencies...{Colors.ENDC}")
            try:
                subprocess.run(['sudo', 'apt', '-f', 'install', '-y'], check=True)
                print(f"{Colors.OKGREEN}Successfully installed {package_name} with dependencies{Colors.ENDC}")
            except subprocess.CalledProcessError:
                print(f"{Colors.FAIL}Failed to resolve dependencies for {package_name}{Colors.ENDC}")
                print(f"{Colors.WARNING}Attempting rollback...{Colors.ENDC}")
                self.remove_package(package_name, is_rollback=True)
                sys.exit(1)
        finally:
            os.remove(deb_path)
    
    def remove_package(self, package_name, is_rollback=False):
        """Remove a package using apt"""
        if not self.is_package_installed(package_name):
            if not is_rollback:
                print(f"{Colors.WARNING}Package {package_name} is not installed{Colors.ENDC}")
            return
        
        try:
            print(f"{Colors.OKBLUE}==> Removing {package_name}...{Colors.ENDC}")
            subprocess.run(['sudo', 'apt', 'remove', '-y', package_name], check=True)
            if not is_rollback:
                print(f"{Colors.OKGREEN}Successfully removed {package_name}{Colors.ENDC}")
        except subprocess.CalledProcessError:
            print(f"{Colors.FAIL}Failed to remove {package_name}{Colors.ENDC}")
            sys.exit(1)
    
    def update_cache(self):
        """Force refresh package cache"""
        self.get_package_list(force_refresh=True)
        print(f"{Colors.OKGREEN}Package cache updated{Colors.ENDC}")
    
    def show_version(self):
        """Display version information"""
        print(f"{Colors.BOLD}Blue Archive Linux Package Manager (bluepm) v2.0{Colors.ENDC}")
        print("Repository Configuration:")
        print(f"  Owner:   {self.config['owner']}")
        print(f"  Repo:    {self.config['repo']}")
        print(f"  Branch:  {self.config['branch']}")
        print(f"  Path:    {self.config['path']}")
    
    def show_help(self):
        """Display help information"""
        print(f"{Colors.BOLD}Blue Archive Linux Package Manager{Colors.ENDC}")
        print("Usage: bluepm <command> [options] [packages]")
        print("\nCommands:")
        print(f"  {Colors.OKCYAN}install [packages]{Colors.ENDC}  - Install one or more packages")
        print(f"  {Colors.OKCYAN}remove [packages]{Colors.ENDC}   - Remove one or more packages")
        print(f"  {Colors.OKCYAN}search [query]{Colors.ENDC}      - Search packages in repository")
        print(f"  {Colors.OKCYAN}update-cache{Colors.ENDC}        - Refresh package cache")
        print(f"  {Colors.OKCYAN}version{Colors.ENDC}             - Show version information")
        print(f"  {Colors.OKCYAN}help{Colors.ENDC}                - Show this help message")
        print("\nExamples:")
        print(f"  bluepm install bal-xfce")
        print(f"  bluepm remove bal-xfce")
        print(f"  bluepm search archive")
        print(f"  bluepm install pkg1 pkg2 pkg3")

# --- Main Function ---
def main():
    # Setup signal handling
    signal.signal(signal.SIGINT, lambda s, f: sys.exit(1))
    
    try:
        pm = BluePackageManager()
        
        if len(sys.argv) < 2:
            pm.show_help()
            sys.exit(1)
        
        command = sys.argv[1]
        
        # Handle non-modifying commands first
        if command in ["-h", "--help", "help"]:
            pm.show_help()
        elif command in ["-v", "--version", "version"]:
            pm.show_version()
        elif command == "search":
            query = sys.argv[2] if len(sys.argv) > 2 else ""
            pm.search_packages(query)
        elif command == "update-cache":
            pm.update_cache()
        # Handle modifying commands
        elif command in ["install", "remove"]:
            if len(sys.argv) < 3:
                print(f"{Colors.FAIL}Error: Package name(s) required{Colors.ENDC}")
                sys.exit(1)
            
            pm.acquire_lock()
            pm.check_dependencies()
            
            # Handle multiple packages
            packages = sys.argv[2:]
            for pkg in packages:
                try:
                    if command == "install":
                        pm.install_package(pkg)
                    elif command == "remove":
                        pm.remove_package(pkg)
                except BluePMError as e:
                    print(f"{Colors.FAIL}Error processing {pkg}: {e}{Colors.ENDC}")
            
            pm.release_lock()
        else:
            print(f"{Colors.FAIL}Error: Unknown command '{command}'{Colors.ENDC}")
            pm.show_help()
            sys.exit(1)
            
    except Exception as e:
        print(f"{Colors.FAIL}Unexpected error: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main()

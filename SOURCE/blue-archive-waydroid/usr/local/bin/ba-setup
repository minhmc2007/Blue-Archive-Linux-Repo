#!/bin/bash

# ==============================================================================
#      Blue Archive Linux - Waydroid Installer for Blue Archive
# ==============================================================================
#
# This script automates the installation of Blue Archive on Blue Archive Linux
# including Zen Kernel installation for optimal Waydroid compatibility.
#
# ==============================================================================

# --- Configuration ---
BLUE_ARCHIVE_URL="https://example.com/path/to/blue_archive.xapk"
WAYDROID_NETWORK="10.0.2.0/24"
HOST_INTERFACE=""

# --- Helper Variables & Functions ---
BLUE_ARCHIVE_BLUE='\033[1;34m'
BLUE_ARCHIVE_GOLD='\033[1;33m'
BLUE_ARCHIVE_RED='\033[0;31m'
BLUE_ARCHIVE_GREEN='\033[1;32m'
NC='\033[0m' # No Color

log_info() {
    echo -e "\n${BLUE_ARCHIVE_GREEN}[INFO] --- $1 ---${NC}"
}

log_warning() {
    echo -e "\n${BLUE_ARCHIVE_GOLD}[WARNING] --- $1 ---${NC}"
}

log_error() {
    echo -e "\n${BLUE_ARCHIVE_RED}[ERROR] --- $1 ---${NC}"
}

log_step() {
    echo -e "\n${BLUE_ARCHIVE_BLUE}>>> $1 <<<${NC}"
}

show_banner() {
    echo -e "${BLUE_ARCHIVE_BLUE}"
    echo "=============================================================="
    echo "    Blue Archive Linux - Waydroid Installer for Blue Archive"
    echo "    (With Zen Kernel Installation)"
    echo "=============================================================="
    echo -e "${NC}"
}

# --- Core Functions ---

install_zen_kernel() {
    log_step "Installing Zen Kernel"
    log_info "The Zen kernel provides optimal performance and Waydroid compatibility"
    
    # Add Liquorix repository for Zen kernel
    sudo apt install -y curl gpg
    curl -sS https://liquorix.net/liquorix-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/liquorix-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/liquorix-keyring.gpg] https://liquorix.net/debian $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/liquorix.list > /dev/null
    
    # Install kernel
    sudo apt update
    sudo apt install -y linux-image-liquorix-amd64 linux-headers-liquorix-amd64
    
    log_info "Zen kernel installed successfully"
    log_warning "A reboot is required to activate the new kernel"
    
    # Prompt for reboot
    echo -e "\n${BLUE_ARCHIVE_GOLD}========================= REBOOT REQUIRED =========================${NC}"
    echo -e "To continue installation, your system needs to reboot with the new kernel"
    echo -e "After rebooting, please re-run this script to complete the installation"
    echo -e "${BLUE_ARCHIVE_GOLD}===================================================================${NC}\n"
    
    read -p "Reboot now? (y/n): " choice
    case "$choice" in
        y|Y ) sudo reboot;;
        * ) 
            log_info "Please reboot and re-run the script when ready"
            exit 0
            ;;
    esac
}

verify_install_zen_kernel() {
    # Check if Zen kernel is already installed and active
    if uname -r | grep -qi "zen"; then
        log_info "Zen kernel is active: $(uname -r)"
        return 0
    fi
    
    # Check if Zen kernel is installed but not active
    if dpkg -l | grep -q "linux-image-liquorix-amd64"; then
        log_warning "Zen kernel is installed but not active"
        log_info "Please reboot your system to activate it"
        exit 0
    fi
    
    # Offer to install Zen kernel
    log_info "Zen kernel not detected"
    echo -e "\n${BLUE_ARCHIVE_GOLD}========================= RECOMMENDATION =========================${NC}"
    echo -e "For optimal Blue Archive performance and Waydroid compatibility, we recommend"
    echo -e "installing the Zen kernel which includes all required features built-in"
    echo -e "${BLUE_ARCHIVE_GOLD}===================================================================${NC}\n"
    
    while true; do
        read -p "Install Zen kernel now? (y/n): " choice
        case "$choice" in
            y|Y )
                install_zen_kernel
                return 1
                ;;
            n|N )
                log_warning "Continuing with current kernel"
                log_warning "Waydroid may not work properly if required features are missing"
                return 0
                ;;
            * ) echo "Please answer y or n";;
        esac
    done
}

install_waydroid() {
    log_step "Installing Waydroid"
    sudo apt update
    sudo apt install -y \
        curl \
        ca-certificates \
        gpg \
        software-properties-common \
        iptables \
        dnsmasq \
        iproute2 \
        git \
        python3 \
        python3-venv
    
    # Add Waydroid repository
    curl -sS https://repo.waydro.id/waydroid.gpg | sudo gpg --dearmor -o /usr/share/keyrings/waydroid.gpg
    echo "deb [signed-by=/usr/share/keyrings/waydroid.gpg] https://repo.waydro.id/ $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/waydroid.list > /dev/null
    
    sudo apt update
    sudo apt install -y waydroid
    
    # Enable automatic start of Waydroid container
    sudo systemctl enable --now waydroid-container
}

configure_network() {
    log_step "Configuring Network for Blue Archive"
    
    # Enable IP forwarding
    sudo sysctl -w net.ipv4.ip_forward=1
    echo "net.ipv4.ip_forward=1" | sudo tee -a /etc/sysctl.conf >/dev/null
    
    # Detect main network interface
    HOST_INTERFACE=$(ip route | grep '^default' | awk '{print $5}' | head -1)
    if [ -z "$HOST_INTERFACE" ]; then
        log_error "Could not detect network interface"
        exit 1
    fi
    log_info "Using network interface: $HOST_INTERFACE"
    
    # Configure NAT with iptables
    sudo iptables -t nat -A POSTROUTING -s "$WAYDROID_NETWORK" -o "$HOST_INTERFACE" -j MASQUERADE
    sudo iptables -A FORWARD -i "$HOST_INTERFACE" -o waydroid0 -m state --state RELATED,ESTABLISHED -j ACCEPT
    sudo iptables -A FORWARD -i waydroid0 -o "$HOST_INTERFACE" -j ACCEPT
    
    # Save iptables rules
    sudo mkdir -p /etc/iptables
    sudo sh -c "iptables-save > /etc/iptables/waydroid-rules.v4"
    
    # Create systemd service to restore rules on boot
    cat <<EOF | sudo tee /etc/systemd/system/waydroid-iptables.service >/dev/null
[Unit]
Description=Restore iptables rules for Waydroid
After=network.target

[Service]
Type=oneshot
ExecStart=/sbin/iptables-restore < /etc/iptables/waydroid-rules.v4

[Install]
WantedBy=multi-user.target
EOF

    sudo systemctl daemon-reload
    sudo systemctl enable waydroid-iptables.service
    
    # Configure DNS
    sudo mkdir -p /etc/waydroid-extra
    echo "nameserver 8.8.8.8" | sudo tee /etc/waydroid-extra/resolv.conf >/dev/null
    echo "nameserver 8.8.4.4" | sudo tee -a /etc/waydroid-extra/resolv.conf >/dev/null
    
    # Create persistent bind mount for DNS
    if ! grep -q "/etc/waydroid-extra/resolv.conf" /etc/fstab; then
        echo "/etc/waydroid-extra/resolv.conf /var/lib/waydroid/rootfs/etc/resolv.conf none bind 0 0" | sudo tee -a /etc/fstab >/dev/null
    fi
    sudo mount -a
    
    log_info "Network configuration complete"
}

initialize_waydroid_gapps() {
    log_step "Initializing Waydroid for Blue Archive"
    log_info "Downloading Android environment with Google Play support..."
    sudo waydroid init -f -s GAPPS -v https://ota.waydro.id/vendor -c https://ota.waydro.id/system
}

install_houdini() {
    log_step "Installing Houdini Translation Layer"
    log_info "This will enable better compatibility for Blue Archive"
    
    # Clone waydroid_script
    if [ ! -d "/tmp/waydroid_script" ]; then
        git clone https://github.com/casualsnek/waydroid_script /tmp/waydroid_script
    fi
    
    cd /tmp/waydroid_script || {
        log_error "Failed to enter waydroid_script directory"
        exit 1
    }
    
    # Set up Python virtual environment
    python3 -m venv venv
    venv/bin/pip install -r requirements.txt
    
    # Install Houdini
    sudo venv/bin/python3 main.py install libhoudini
    
    cd - || exit
    log_info "Houdini translation layer installed successfully"
}

handle_play_certification() {
    log_step "Google Play Certification for Blue Archive"
    sudo systemctl restart waydroid-container
    log_info "Preparing Android environment..."
    
    # Wait for container to be ready
    local timeout=60
    local counter=0
    while ! waydroid status | grep -q "RUNNING"; do
        sleep 2
        counter=$((counter + 2))
        if [ $counter -ge $timeout ]; then
            log_error "Timed out waiting for Waydroid container to start"
            exit 1
        fi
    done

    # Retrieve Android ID
    SQL_CMD='ANDROID_RUNTIME_ROOT=/apex/com.android.runtime ANDROID_DATA=/data ANDROID_TZDATA_ROOT=/apex/com.android.tzdata ANDROID_I18N_ROOT=/apex/com.android.i18n sqlite3 /data/data/com.google.android.gsf/databases/gservices.db "select * from main where name = \"android_id\";"'
    
    ANDROID_ID_OUTPUT=$(sudo waydroid shell "$SQL_CMD")
    
    if [[ -z "$ANDROID_ID_OUTPUT" ]]; then
        log_error "Could not retrieve Android ID. Trying again..."
        sleep 15
        ANDROID_ID_OUTPUT=$(sudo waydroid shell "$SQL_CMD")
        
        if [[ -z "$ANDROID_ID_OUTPUT" ]]; then
            log_error "Failed to retrieve Android ID after second attempt"
            log_warning "Please ensure internet connectivity and try again"
            exit 1
        fi
    fi
    
    ANDROID_ID=$(echo "$ANDROID_ID_OUTPUT" | cut -d'|' -f2)

    echo -e "\n${BLUE_ARCHIVE_GOLD}========================= ACTION REQUIRED =========================${NC}"
    echo -e "To install Blue Archive, you need to ${BLUE_ARCHIVE_BLUE}register your device${NC}"
    echo -e "1. Visit: ${BLUE_ARCHIVE_GREEN}https://www.google.com/android/uncertified/${NC}"
    echo -e "2. Sign in with your Google account"
    echo -e "3. Enter this ID: ${BLUE_ARCHIVE_GOLD}$ANDROID_ID${NC}"
    echo -e "4. Click ${BLUE_ARCHIVE_GREEN}'Register device'${NC}"
    echo -e "${BLUE_ARCHIVE_GOLD}===================================================================${NC}\n"

    # Wait for user to confirm completion
    while true; do
        read -p "Have you completed the registration? (Type 'yes' to continue): " yn
        case $yn in
            [Yy][Ee][Ss] ) break;;
            * ) echo "Registration is required to install Blue Archive";;
        esac
    done

    log_info "Finalizing Blue Archive setup..."
    sudo systemctl restart waydroid-container
    log_warning "Play Store may take 5-15 minutes to become available"
}

install_blue_archive() {
    log_step "Installing Blue Archive"
    if [[ -n "$BLUE_ARCHIVE_URL" && "$BLUE_ARCHIVE_URL" != "https://example.com/path/to/blue_archive.xapk" ]]; then
        FILENAME=$(basename "$BLUE_ARCHIVE_URL")
        TEMP_FILE="/tmp/$FILENAME"
        
        log_info "Downloading Blue Archive..."
        wget -q --show-progress -O "$TEMP_FILE" "$BLUE_ARCHIVE_URL"
        
        if [ ! -f "$TEMP_FILE" ]; then
            log_error "Download failed! Check URL and network connection"
            return 1
        fi
        
        # Determine file type and install accordingly
        if [[ "$FILENAME" == *.apk ]]; then
            log_info "Installing Blue Archive APK..."
            sudo waydroid app install "$TEMP_FILE"
        elif [[ "$FILENAME" == *.xapk ]] || [[ "$FILENAME" == *.apks ]]; then
            log_info "Installing Blue Archive package..."
            unzip -q "$TEMP_FILE" -d "/tmp/bluearchive"
            sudo waydroid app install /tmp/bluearchive/*.apk
            rm -rf "/tmp/bluearchive"
        else
            log_error "Unsupported file format: $FILENAME"
            log_info "Supported formats: APK, XAPK, APKS"
            return 1
        fi
        
        rm "$TEMP_FILE"
        log_info "Blue Archive installed successfully!"
    else
        log_error "Blue Archive URL not configured!"
        echo "Please edit the script and set BLUE_ARCHIVE_URL"
        exit 1
    fi
}

# --- Main Execution ---
main() {
    show_banner
    
    # Verify root privileges
    if [ "$EUID" -ne 0 ]; then
        log_error "Please run as root: sudo $0"
        exit 1
    fi
    
    log_step "Starting Blue Archive Installation"
    
    # Verify and install Zen kernel if needed
    verify_install_zen_kernel
    kernel_result=$?
    
    # If kernel installation requested reboot, exit
    if [ $kernel_result -eq 1 ]; then
        exit 0
    fi
    
    # Continue with installation
    install_waydroid
    initialize_waydroid_gapps
    configure_network
    install_houdini
    handle_play_certification
    install_blue_archive

    echo -e "\n${BLUE_ARCHIVE_BLUE}==================== BLUE ARCHIVE INSTALLED ====================${NC}"
    log_info "Blue Archive is ready to play!"
    echo -e "Start Waydroid with: ${BLUE_ARCHIVE_GREEN}waydroid session start${NC}"
    echo -e "Launch Blue Archive with: ${BLUE_ARCHIVE_GREEN}waydroid show-full-ui${NC}"
    echo ""
    log_warning "Important Notes:"
    echo -e "• First launch may take several minutes"
    echo -e "• Houdini translation layer has been installed for better compatibility"
    echo -e "• If the game doesn't start: ${BLUE_ARCHIVE_GOLD}sudo systemctl restart waydroid-container${NC}"
    echo -e "• Reboot if you encounter persistent issues"
    echo -e "• Report issues at: ${BLUE_ARCHIVE_GREEN}https://github.com/bluearchivelinux/support${NC}"
    echo -e "\n${BLUE_ARCHIVE_GOLD}Enjoy Blue Archive on Blue Archive Linux!${NC}"
    
    # Cleanup temporary files
    if [ -d "/tmp/waydroid_script" ]; then
        rm -rf "/tmp/waydroid_script"
    fi
}

# Run the main function
main
